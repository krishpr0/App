```
import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:fl_chart/fl_chart.dart';

void main() {
  runApp(const MyApp());
}

enum AssignmentStatus { Todo, InProgress, Completed }

enum SubjectName {
  English,
  Mathematics,
  Science,
  Nepali,
  Computer,
  DigitalDesignAndMicroprocessor,
  ObjectOrientedProgrammingLanguage,
  DatabaseManagementSystem,
  OptionalMaths,
}

enum TeacherName {
  MrSushatAdhikari,
  MrMachaKaji,
  MrSurendraKhadka,
  MrRajwolMaharjan,
  MrAnishMaharjan,
  MsRejaThapa,
  MsAnitaShahi,
  MsMalikaJoshi,
}

List<String> dynamicSubjects = [];
List<String> dynamicTeachers = [];

class Assignment {
  String subject;
  String title;
  String description;
  DateTime deadline;
  String submitTo;
  AssignmentStatus status;
  DateTime? startDate;
  DateTime? completionDate;
  String? imagePath;

  Assignment({
    required this.subject,
    required this.title,
    required this.description,
    required this.deadline,
    required this.submitTo,
    this.status = AssignmentStatus.Todo,
    this.startDate,
    this.completionDate,
    this.imagePath,
  });

  factory Assignment.fromJson(Map<String, dynamic> json) {
    return Assignment(
      subject: json['subject'],
      title: json['title'],
      description: json['description'],
      deadline: DateTime.parse(json['deadline']),
      submitTo: json['submitTo'],
      status: AssignmentStatus.values[json['status'] ?? 0],
      startDate: json['startDate'] != null
          ? DateTime.tryParse(json['startDate'])
          : null,
      completionDate: json['completionDate'] != null
          ? DateTime.tryParse(json['completionDate'])
          : null,
      imagePath: json['imagePath'],
    );
  }

  Map<String, dynamic> toJson() => {
    'subject': subject,
    'title': title,
    'description': description,
    'deadline': deadline.toIso8601String(),
    'submitTo': submitTo,
    'status': status.index,
    'startDate': startDate?.toIso8601String(),
    'completionDate': completionDate?.toIso8601String(),
    'imagePath': imagePath,
  };
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Assignment Manager',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.deepPurple,
          brightness: Brightness.dark,
          background: Colors.grey[900],
          onBackground: Colors.white,
          surface: Colors.grey[850],
          onSurface: Colors.white,
          primary: Colors.deepPurple[300],
          onPrimary: Colors.white,
        ),
        scaffoldBackgroundColor: Colors.grey[900],
        textTheme: const TextTheme(
          displayLarge: TextStyle(
            fontSize: 28,
            fontWeight: FontWeight.bold,
            color: Colors.white,
          ),
          headlineMedium: TextStyle(
            fontSize: 22,
            fontWeight: FontWeight.w600,
            color: Colors.white,
          ),
          bodyLarge: TextStyle(fontSize: 16, color: Colors.white),
          bodyMedium: TextStyle(fontSize: 14, color: Colors.white70),
          labelLarge: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
            color: Colors.white,
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.deepPurple[300],
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12),
              side: BorderSide(color: Colors.deepPurple[100]!, width: 1),
            ),
            elevation: 2,
          ),
        ),
        cardTheme: CardThemeData(
          color: Colors.grey[850],
          surfaceTintColor: Colors.grey[850],
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
            side: BorderSide(color: Colors.grey[700]!, width: 1),
          ),
          elevation: 4,
          shadowColor: Colors.black45,
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.grey[900],
          foregroundColor: Colors.white,
          elevation: 0,
          shadowColor: Colors.black45,
          titleTextStyle: const TextStyle(
            fontSize: 22,
            fontWeight: FontWeight.w600,
            color: Colors.white,
          ),
        ),
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: Colors.grey[800],
          labelStyle: const TextStyle(color: Colors.white70),
          hintStyle: const TextStyle(color: Colors.white54),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: Colors.grey[600]!),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: Colors.grey[600]!),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12),
            borderSide: BorderSide(color: Colors.deepPurple[300]!, width: 2),
          ),
        ),
        dropdownMenuTheme: DropdownMenuThemeData(
          textStyle: const TextStyle(color: Colors.white),
          menuStyle: MenuStyle(
            backgroundColor: WidgetStateProperty.all(Colors.grey[850]),
            shape: WidgetStateProperty.all(
              RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
                side: BorderSide(color: Colors.grey[700]!, width: 1),
              ),
            ),
          ),
        ),
      ),
      home: const AssignmentManager(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class AssignmentManager extends StatefulWidget {
  const AssignmentManager({super.key});

  @override
  State<AssignmentManager> createState() => _AssignmentManagerState();
}

class _AssignmentManagerState extends State<AssignmentManager> {
  final List<Assignment> _assignments = [];

  @override
  void initState() {
    super.initState();
    _loadAssignments();
  }

  Future<void> _loadAssignments() async {
    final prefs = await SharedPreferences.getInstance();
    final data = prefs.getStringList('assignments') ?? [];
    setState(() {
      _assignments.clear();
      _assignments.addAll(data.map((e) => Assignment.fromJson(jsonDecode(e))));
    });
  }

  Future<void> _saveAssignments() async {
    final prefs = await SharedPreferences.getInstance();
    final data = _assignments.map((a) => jsonEncode(a.toJson())).toList();
    await prefs.setStringList('assignments', data);
  }

  void _addOrEditAssignment({Assignment? assignment, int? index}) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => AssignmentForm(assignment: assignment),
      ),
    );
    if (result != null && result is Assignment) {
      setState(() {
        if (index != null) {
          _assignments[index] = result;
        } else {
          _assignments.add(result);
        }
      });
      await _saveAssignments();
    }
  }

  void _removeAssignment(int index) async {
    setState(() {
      _assignments.removeAt(index);
    });
    await _saveAssignments();
  }

  void _showAssignmentDetail(Assignment assignment, int index) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => AssignmentDetail(
          assignment: assignment,
          onEdit: () =>
              _addOrEditAssignment(assignment: assignment, index: index),
          onDelete: () {
            _removeAssignment(index);
            Navigator.pop(context);
          },
        ),
      ),
    );
  }

  Widget buildKanbanBoard() {
    Map<AssignmentStatus, List<Assignment>> statusMap = {
      AssignmentStatus.Todo: [],
      AssignmentStatus.InProgress: [],
      AssignmentStatus.Completed: [],
    };
    for (var a in _assignments) {
      statusMap[a.status]?.add(a);
    }

    final double kanbanHeight =
        (MediaQuery.of(context).size.height - kToolbarHeight - 100).clamp(
          200.0,
          double.infinity,
        );

    return SingleChildScrollView(
      scrollDirection: Axis.horizontal,
      child: SizedBox(
        height: kanbanHeight,
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: AssignmentStatus.values.map((status) {
            return Container(
              width: 280,
              margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 12),
              decoration: BoxDecoration(
                color: Colors.grey[850],
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black45,
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: DragTarget<Assignment>(
                onWillAccept: (assignment) {
                  if (assignment == null) return false;
                  if (status == AssignmentStatus.InProgress &&
                      assignment.status == AssignmentStatus.Todo)
                    return true;
                  if (status == AssignmentStatus.Completed &&
                      assignment.status == AssignmentStatus.InProgress)
                    return true;
                  return false;
                },
                onAccept: (assignment) async {
                  WidgetsBinding.instance.addPostFrameCallback((_) async {
                    setState(() {
                      final index = _assignments.indexOf(assignment);
                      if (index != -1) {
                        if (status == AssignmentStatus.InProgress &&
                            assignment.status == AssignmentStatus.Todo) {
                          assignment.status = AssignmentStatus.InProgress;
                          assignment.startDate = DateTime.now();
                        } else if (status == AssignmentStatus.Completed &&
                            assignment.status == AssignmentStatus.InProgress) {
                          _promptForImageAndComplete(assignment);
                          return;
                        }
                        _assignments[index] = assignment;
                      }
                    });
                    await _saveAssignments();
                  });
                },
                builder: (context, candidateData, rejectedData) => Column(
                  children: [
                    Padding(
                      padding: const EdgeInsets.all(12.0),
                      child: Material(
                        elevation: 2,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                          side: BorderSide(
                            color: Colors.deepPurple[100]!,
                            width: 1,
                          ),
                        ),
                        child: Container(
                          width: double.infinity,
                          padding: const EdgeInsets.symmetric(vertical: 12),
                          decoration: BoxDecoration(
                            color: Colors.deepPurple[300],
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Center(
                            child: Text(
                              status
                                  .toString()
                                  .split('.')
                                  .last
                                  .replaceAllMapped(
                                    RegExp(r'([A-Z])'),
                                    (m) => ' ${m[1]}',
                                  )
                                  .toUpperCase(),
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 18,
                                color: Colors.white,
                                letterSpacing: 1.2,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        ),
                      ),
                    ),
                    if (candidateData.isNotEmpty)
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: Text(
                          "Drop here",
                          style: TextStyle(
                            color: Colors.grey[400],
                            fontStyle: FontStyle.italic,
                          ),
                        ),
                      ),
                    Expanded(
                      child: ListView.builder(
                        padding: const EdgeInsets.all(8),
                        itemCount: statusMap[status]!.length,
                        itemBuilder: (context, index) {
                          final assignment = statusMap[status]![index];
                          return Draggable<Assignment>(
                            data: assignment,
                            feedback: Material(
                              elevation: 4,
                              borderRadius: BorderRadius.circular(12),
                              child: Container(
                                width: 260,
                                decoration: BoxDecoration(
                                  color: Colors.grey[800],
                                  borderRadius: BorderRadius.circular(12),
                                ),
                                child: ListTile(
                                  title: Text(
                                    assignment.title,
                                    style: const TextStyle(
                                      fontWeight: FontWeight.w600,
                                      fontSize: 16,
                                      color: Colors.white,
                                    ),
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                  subtitle: Text(
                                    assignment.subject,
                                    style: const TextStyle(
                                      fontSize: 13,
                                      color: Colors.white70,
                                      fontStyle: FontStyle.italic,
                                    ),
                                    maxLines: 1,
                                    overflow: TextOverflow.ellipsis,
                                  ),
                                ),
                              ),
                            ),
                            child: Container(
                              margin: const EdgeInsets.symmetric(vertical: 4),
                              decoration: BoxDecoration(
                                color: Colors.grey[800],
                                borderRadius: BorderRadius.circular(12),
                                border: Border.all(
                                  color: Colors.grey[700]!,
                                  width: 1,
                                ),
                              ),
                              child: ListTile(
                                contentPadding: const EdgeInsets.symmetric(
                                  horizontal: 12,
                                  vertical: 8,
                                ),
                                title: Text(
                                  assignment.title,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.w600,
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                subtitle: Text(
                                  assignment.subject,
                                  style: const TextStyle(
                                    fontSize: 13,
                                    color: Colors.white70,
                                    fontStyle: FontStyle.italic,
                                  ),
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                ),
                                onTap: () => _showAssignmentDetail(
                                  assignment,
                                  _assignments.indexOf(assignment),
                                ),
                                trailing:
                                    assignment.status ==
                                            AssignmentStatus.Completed &&
                                        assignment.imagePath != null
                                    ? ClipRRect(
                                        borderRadius: BorderRadius.circular(8),
                                        child: Image.file(
                                          File(assignment.imagePath!),
                                          width: 40,
                                          height: 40,
                                          fit: BoxFit.cover,
                                          errorBuilder:
                                              (context, error, stackTrace) =>
                                                  const Icon(
                                                    Icons.broken_image,
                                                    color: Colors.white70,
                                                    size: 24,
                                                  ),
                                        ),
                                      )
                                    : null,
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ],
                ),
              ),
            );
          }).toList(),
        ),
      ),
    );
  }

  Future<void> _promptForImageAndComplete(Assignment assignment) async {
    final picker = ImagePicker();
    final picked = await picker.pickImage(source: ImageSource.gallery);
    if (picked != null) {
      setState(() {
        assignment.status = AssignmentStatus.Completed;
        assignment.completionDate = DateTime.now();
        assignment.imagePath = picked.path;
      });
      await _saveAssignments();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Assignment Manager'),
        actions: [
          IconButton(
            icon: const Icon(Icons.dashboard, color: Colors.white),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (_) => DashboardPage(
                    assignments: _assignments,
                    onAssignmentTap: (a, idx) => _showAssignmentDetail(a, idx),
                  ),
                ),
              );
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            ElevatedButton(
              onPressed: () => _addOrEditAssignment(),
              style: ElevatedButton.styleFrom(
                minimumSize: const Size(double.infinity, 48),
              ),
              child: const Text(
                'Add Assignment',
                style: TextStyle(fontSize: 16),
              ),
            ),
            const SizedBox(height: 16),
            Expanded(child: buildKanbanBoard()),
          ],
        ),
      ),
    );
  }
}

class AssignmentForm extends StatefulWidget {
  final Assignment? assignment;
  const AssignmentForm({super.key, this.assignment});

  @override
  State<AssignmentForm> createState() => _AssignmentFormState();
}

class _AssignmentFormState extends State<AssignmentForm> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _subjectController;
  late TextEditingController _titleController;
  late TextEditingController _descriptionController;
  late TextEditingController _submitToController;
  DateTime? _deadline;
  AssignmentStatus _status = AssignmentStatus.Todo;
  DateTime? _startDate;
  DateTime? _completionDate;
  String? _imagePath;

  @override
  void initState() {
    super.initState();
    _subjectController = TextEditingController(
      text: widget.assignment?.subject ?? '',
    );
    _titleController = TextEditingController(
      text: widget.assignment?.title ?? '',
    );
    _descriptionController = TextEditingController(
      text: widget.assignment?.description ?? '',
    );
    _submitToController = TextEditingController(
      text: widget.assignment?.submitTo ?? '',
    );
    _deadline = widget.assignment?.deadline;
    _status = widget.assignment?.status ?? AssignmentStatus.Todo;
    _startDate = widget.assignment?.startDate;
    _completionDate = widget.assignment?.completionDate;
    _imagePath = widget.assignment?.imagePath;
  }

  @override
  void dispose() {
    _subjectController.dispose();
    _titleController.dispose();
    _descriptionController.dispose();
    _submitToController.dispose();
    super.dispose();
  }

  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final picked = await picker.pickImage(source: ImageSource.gallery);
    if (picked != null) {
      setState(() {
        _imagePath = picked.path;
      });
    }
  }

  Future<void> _pickDeadline() async {
    final now = DateTime.now();
    final picked = await showDatePicker(
      context: context,
      initialDate: _deadline ?? now,
      firstDate: now,
      lastDate: DateTime(now.year + 5),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.dark(
              primary: Colors.deepPurple[300]!,
              onPrimary: Colors.white,
              surface: Colors.grey[850]!,
              onSurface: Colors.white,
            ),
            dialogBackgroundColor: Colors.grey[850],
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: Colors.deepPurple[300],
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null) {
      setState(() {
        _deadline = picked;
      });
    }
  }

  Future<void> _pickStartDate() async {
    final now = DateTime.now();
    final picked = await showDatePicker(
      context: context,
      initialDate: _startDate ?? now,
      firstDate: DateTime(now.year - 1),
      lastDate: DateTime(now.year + 5),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.dark(
              primary: Colors.deepPurple[300]!,
              onPrimary: Colors.white,
              surface: Colors.grey[850]!,
              onSurface: Colors.white,
            ),
            dialogBackgroundColor: Colors.grey[850],
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: Colors.deepPurple[300],
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null) {
      setState(() {
        _startDate = picked;
      });
    }
  }

  Future<void> _pickCompletionDate() async {
    final now = DateTime.now();
    final picked = await showDatePicker(
      context: context,
      initialDate: _completionDate ?? now,
      firstDate: DateTime(now.year - 1),
      lastDate: DateTime(now.year + 5),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.dark(
              primary: Colors.deepPurple[300]!,
              onPrimary: Colors.white,
              surface: Colors.grey[850]!,
              onSurface: Colors.white,
            ),
            dialogBackgroundColor: Colors.grey[850],
            textButtonTheme: TextButtonThemeData(
              style: TextButton.styleFrom(
                foregroundColor: Colors.white,
                backgroundColor: Colors.deepPurple[300],
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null) {
      setState(() {
        _completionDate = picked;
      });
    }
  }

  Widget _buildSubjectField() {
    return DropdownButtonFormField<String>(
      value: _subjectController.text.isNotEmpty
          ? _subjectController.text
          : null,
      items: getAllSubjects().map((subject) {
        return DropdownMenuItem(value: subject, child: Text(subject));
      }).toList(),
      onChanged: (val) {
        setState(() {
          _subjectController.text = val ?? '';
        });
      },
      decoration: const InputDecoration(
        labelText: 'Subject Name',
        prefixIcon: Icon(Icons.book, color: Colors.white70),
      ),
    );
  }

  Widget _buildAddSubjectButton(BuildContext context) {
    return TextButton(
      onPressed: () async {
        final newSubject = await showDialog<String>(
          context: context,
          builder: (context) {
            final controller = TextEditingController();
            return AlertDialog(
              backgroundColor: Colors.grey[850],
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              title: const Text(
                'Add Subject',
                style: TextStyle(color: Colors.white),
              ),
              content: TextField(
                controller: controller,
                style: const TextStyle(color: Colors.white),
                decoration: InputDecoration(
                  labelText: 'Subject Name',
                  labelStyle: const TextStyle(color: Colors.white70),
                  filled: true,
                  fillColor: Colors.grey[800],
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey[600]!),
                  ),
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text(
                    'Cancel',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
                TextButton(
                  onPressed: () => Navigator.pop(context, controller.text),
                  child: const Text(
                    'Add',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ],
            );
          },
        );
        if (newSubject != null && newSubject.trim().isNotEmpty) {
          setState(() {
            addSubject(newSubject.trim());
            _subjectController.text = newSubject.trim();
          });
        }
      },
      child: const Text(
        'Add Subject',
        style: TextStyle(color: Colors.deepPurpleAccent),
      ),
    );
  }

  Widget _buildTeacherField() {
    return DropdownButtonFormField<String>(
      value: _submitToController.text.isNotEmpty
          ? _submitToController.text
          : null,
      items: getAllTeachers().map((teacher) {
        return DropdownMenuItem(value: teacher, child: Text(teacher));
      }).toList(),
      onChanged: (val) {
        setState(() {
          _submitToController.text = val ?? '';
        });
      },
      decoration: const InputDecoration(
        labelText: 'Submit To (Teacher)',
        prefixIcon: Icon(Icons.person, color: Colors.white70),
      ),
    );
  }

  Widget _buildAddTeacherButton(BuildContext context) {
    return TextButton(
      onPressed: () async {
        final newTeacher = await showDialog<String>(
          context: context,
          builder: (context) {
            final controller = TextEditingController();
            return AlertDialog(
              backgroundColor: Colors.grey[850],
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              title: const Text(
                'Add Teacher',
                style: TextStyle(color: Colors.white),
              ),
              content: TextField(
                controller: controller,
                style: const TextStyle(color: Colors.white),
                decoration: InputDecoration(
                  labelText: 'Teacher Name',
                  labelStyle: const TextStyle(color: Colors.white70),
                  filled: true,
                  fillColor: Colors.grey[800],
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                    borderSide: BorderSide(color: Colors.grey[600]!),
                  ),
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text(
                    'Cancel',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
                TextButton(
                  onPressed: () => Navigator.pop(context, controller.text),
                  child: const Text(
                    'Add',
                    style: TextStyle(color: Colors.white),
                  ),
                ),
              ],
            );
          },
        );
        if (newTeacher != null && newTeacher.trim().isNotEmpty) {
          setState(() {
            addTeacher(newTeacher.trim());
            _submitToController.text = newTeacher.trim();
          });
        }
      },
      child: const Text(
        'Add Teacher',
        style: TextStyle(color: Colors.deepPurpleAccent),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.assignment == null ? 'Add Assignment' : 'Edit Assignment',
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              _buildSubjectField(),
              _buildAddSubjectButton(context),
              const SizedBox(height: 12),
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(
                  labelText: 'Assignment Title',
                  prefixIcon: Icon(Icons.title, color: Colors.white70),
                ),
                validator: (value) => value!.isEmpty ? 'Enter title' : null,
                style: const TextStyle(color: Colors.white),
              ),
              const SizedBox(height: 12),
              TextFormField(
                controller: _descriptionController,
                decoration: const InputDecoration(
                  labelText: 'Description',
                  prefixIcon: Icon(Icons.description, color: Colors.white70),
                ),
                maxLines: 3,
                validator: (value) =>
                    value!.isEmpty ? 'Enter description' : null,
                style: const TextStyle(color: Colors.white),
              ),
              const SizedBox(height: 12),
              _buildTeacherField(),
              _buildAddTeacherButton(context),
              const SizedBox(height: 12),
              Container(
                decoration: BoxDecoration(
                  color: Colors.grey[800],
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.grey[700]!, width: 1),
                ),
                child: ListTile(
                  title: Text(
                    _deadline == null
                        ? 'Pick Deadline'
                        : 'Deadline: ${_deadline!.toLocal().toString().split(' ')[0]}',
                    style: const TextStyle(color: Colors.white),
                  ),
                  trailing: const Icon(
                    Icons.calendar_today,
                    color: Colors.white70,
                  ),
                  onTap: _pickDeadline,
                ),
              ),
              if (_deadline == null)
                const Padding(
                  padding: EdgeInsets.only(left: 16.0, top: 8),
                  child: Text(
                    'Please select a deadline',
                    style: TextStyle(color: Colors.redAccent),
                  ),
                ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _save,
                style: ElevatedButton.styleFrom(
                  minimumSize: const Size(double.infinity, 48),
                ),
                child: Text(
                  widget.assignment == null ? 'Add' : 'Update',
                  style: const TextStyle(fontSize: 16),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _save() {
    if (_formKey.currentState!.validate() && _deadline != null) {
      final assignment = Assignment(
        subject: _subjectController.text,
        title: _titleController.text,
        description: _descriptionController.text,
        deadline: _deadline!,
        submitTo: _submitToController.text,
        status: AssignmentStatus.Todo,
        startDate: null,
        completionDate: null,
        imagePath: null,
      );
      Navigator.pop(context, assignment);
    }
  }
}

class AssignmentDetail extends StatelessWidget {
  final Assignment assignment;
  final VoidCallback onEdit;
  final VoidCallback onDelete;

  const AssignmentDetail({
    super.key,
    required this.assignment,
    required this.onEdit,
    required this.onDelete,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(assignment.title),
        actions: [
          IconButton(
            icon: const Icon(Icons.edit, color: Colors.white),
            onPressed: onEdit,
          ),
          IconButton(
            icon: const Icon(Icons.delete, color: Colors.white),
            onPressed: onDelete,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ListView(
          children: [
            _buildDetailCard(
              title: 'Subject',
              subtitle: assignment.subject,
              icon: Icons.book,
            ),
            _buildDetailCard(
              title: 'Title',
              subtitle: assignment.title,
              icon: Icons.title,
            ),
            _buildDetailCard(
              title: 'Description',
              subtitle: assignment.description,
              icon: Icons.description,
            ),
            _buildDetailCard(
              title: 'Deadline',
              subtitle: assignment.deadline.toLocal().toString().split(' ')[0],
              icon: Icons.calendar_today,
            ),
            _buildDetailCard(
              title: 'Submit To',
              subtitle: assignment.submitTo,
              icon: Icons.person,
            ),
            if (assignment.status == AssignmentStatus.Completed) ...[
              if (assignment.startDate != null)
                _buildDetailCard(
                  title: 'Started Date',
                  subtitle: assignment.startDate!.toLocal().toString().split(
                    ' ',
                  )[0],
                  icon: Icons.start,
                ),
              if (assignment.completionDate != null)
                _buildDetailCard(
                  title: 'Completed Date',
                  subtitle: assignment.completionDate!
                      .toLocal()
                      .toString()
                      .split(' ')[0],
                  icon: Icons.check_circle,
                ),
              if (assignment.imagePath != null)
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 12.0),
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.grey[800],
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey[700]!, width: 1),
                    ),
                    padding: const EdgeInsets.all(12.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Assignment Image',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            fontSize: 16,
                            color: Colors.white,
                          ),
                        ),
                        const SizedBox(height: 8),
                        ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child: Image.file(
                            File(assignment.imagePath!),
                            height: 200,
                            width: double.infinity,
                            fit: BoxFit.cover,
                            errorBuilder: (context, error, stackTrace) =>
                                const Icon(
                                  Icons.broken_image,
                                  color: Colors.white70,
                                  size: 48,
                                ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildDetailCard({
    required String title,
    required String subtitle,
    required IconData icon,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 6),
      decoration: BoxDecoration(
        color: Colors.grey[800],
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey[700]!, width: 1),
      ),
      child: ListTile(
        leading: Icon(icon, color: Colors.white70),
        title: Text(title, style: const TextStyle(color: Colors.white)),
        subtitle: Text(subtitle, style: const TextStyle(color: Colors.white70)),
      ),
    );
  }
}

class DashboardPage extends StatefulWidget {
  final List<Assignment> assignments;
  final void Function(Assignment, int) onAssignmentTap;

  const DashboardPage({
    super.key,
    required this.assignments,
    required this.onAssignmentTap,
  });

  @override
  State<DashboardPage> createState() => _DashboardPageState();
}

class _DashboardPageState extends State<DashboardPage> {
  AssignmentStatus? _statusFilter;
  String _search = '';

  @override
  Widget build(BuildContext context) {
    final todoCount = widget.assignments
        .where((a) => a.status == AssignmentStatus.Todo)
        .length;
    final inProgressCount = widget.assignments
        .where((a) => a.status == AssignmentStatus.InProgress)
        .length;
    final completedCount = widget.assignments
        .where((a) => a.status == AssignmentStatus.Completed)
        .length;

    final filtered = widget.assignments.where((a) {
      final matchesStatus = _statusFilter == null || a.status == _statusFilter;
      final matchesSearch =
          _search.isEmpty ||
          a.title.toLowerCase().contains(_search.toLowerCase()) ||
          a.subject.toLowerCase().contains(_search.toLowerCase());
      return matchesStatus && matchesSearch;
    }).toList();

    return Scaffold(
      appBar: AppBar(title: const Text('Dashboard')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _statusCountCard('To Do', todoCount, Colors.orange[700]!),
                _statusCountCard(
                  'In Progress',
                  inProgressCount,
                  Colors.blue[700]!,
                ),
                _statusCountCard(
                  'Completed',
                  completedCount,
                  Colors.green[700]!,
                ),
              ],
            ),
            const SizedBox(height: 16),
            Container(
              decoration: BoxDecoration(
                color: Colors.grey[850],
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black45,
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              padding: const EdgeInsets.all(12.0),
              child: SizedBox(
                height: 180,
                child: PieChart(
                  PieChartData(
                    sections: [
                      PieChartSectionData(
                        value: todoCount.toDouble(),
                        color: Colors.orange[700],
                        title: 'To Do',
                        titleStyle: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w600,
                        ),
                        radius: 60,
                      ),
                      PieChartSectionData(
                        value: inProgressCount.toDouble(),
                        color: Colors.blue[700],
                        title: 'In Progress',
                        titleStyle: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w600,
                        ),
                        radius: 60,
                      ),
                      PieChartSectionData(
                        value: completedCount.toDouble(),
                        color: Colors.green[700],
                        title: 'Completed',
                        titleStyle: const TextStyle(
                          color: Colors.white,
                          fontWeight: FontWeight.w600,
                        ),
                        radius: 60,
                      ),
                    ],
                    sectionsSpace: 4,
                    centerSpaceRadius: 40,
                  ),
                ),
              ),
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  flex: 2,
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.grey[800],
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey[700]!, width: 1),
                    ),
                    padding: const EdgeInsets.symmetric(horizontal: 12.0),
                    child: DropdownButton<AssignmentStatus?>(
                      value: _statusFilter,
                      hint: const Text(
                        'Filter by Status',
                        style: TextStyle(color: Colors.white70),
                      ),
                      items: [
                        const DropdownMenuItem(
                          value: null,
                          child: Text(
                            'All',
                            style: TextStyle(color: Colors.white),
                          ),
                        ),
                        ...AssignmentStatus.values.map(
                          (status) => DropdownMenuItem(
                            value: status,
                            child: Text(
                              status.toString().split('.').last,
                              style: const TextStyle(color: Colors.white),
                            ),
                          ),
                        ),
                      ],
                      onChanged: (val) => setState(() => _statusFilter = val),
                      isExpanded: true,
                      underline: const SizedBox(),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  flex: 3,
                  child: Container(
                    decoration: BoxDecoration(
                      color: Colors.grey[800],
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey[700]!, width: 1),
                    ),
                    child: TextField(
                      decoration: const InputDecoration(
                        hintText: 'Search by title or subject',
                        prefixIcon: Icon(Icons.search, color: Colors.white70),
                        border: InputBorder.none,
                        contentPadding: EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 14,
                        ),
                      ),
                      style: const TextStyle(color: Colors.white),
                      onChanged: (val) => setState(() => _search = val),
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),
            Expanded(
              child: filtered.isEmpty
                  ? const Center(
                      child: Text(
                        'No assignments found.',
                        style: TextStyle(color: Colors.white70, fontSize: 16),
                      ),
                    )
                  : ListView.builder(
                      itemCount: filtered.length,
                      itemBuilder: (context, idx) {
                        final a = filtered[idx];
                        return Container(
                          margin: const EdgeInsets.symmetric(vertical: 6),
                          decoration: BoxDecoration(
                            color: Colors.grey[800],
                            borderRadius: BorderRadius.circular(12),
                            border: Border.all(
                              color: Colors.grey[700]!,
                              width: 1,
                            ),
                          ),
                          child: ListTile(
                            contentPadding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 8,
                            ),
                            title: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  a.title,
                                  style: const TextStyle(
                                    fontWeight: FontWeight.w600,
                                    fontSize: 16,
                                    color: Colors.white,
                                  ),
                                ),
                                const SizedBox(height: 4),
                                Text(
                                  a.subject,
                                  style: const TextStyle(
                                    fontSize: 13,
                                    color: Colors.white70,
                                    fontStyle: FontStyle.italic,
                                  ),
                                ),
                              ],
                            ),
                            subtitle: Padding(
                              padding: const EdgeInsets.only(top: 4),
                              child: Text(
                                a.status.toString().split('.').last,
                                style: TextStyle(
                                  fontSize: 12,
                                  color: a.status == AssignmentStatus.Todo
                                      ? Colors.orange[300]
                                      : a.status == AssignmentStatus.InProgress
                                      ? Colors.blue[300]
                                      : Colors.green[300],
                                ),
                              ),
                            ),
                            trailing:
                                a.status == AssignmentStatus.Completed &&
                                    a.imagePath != null
                                ? ClipRRect(
                                    borderRadius: BorderRadius.circular(8),
                                    child: Image.file(
                                      File(a.imagePath!),
                                      width: 40,
                                      height: 40,
                                      fit: BoxFit.cover,
                                      errorBuilder:
                                          (context, error, stackTrace) =>
                                              const Icon(
                                                Icons.broken_image,
                                                color: Colors.white70,
                                                size: 24,
                                              ),
                                    ),
                                  )
                                : null,
                            onTap: () => widget.onAssignmentTap(
                              a,
                              widget.assignments.indexOf(a),
                            ),
                          ),
                        );
                      },
                    ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _statusCountCard(String label, int count, Color color) {
    return Container(
      width: 100,
      decoration: BoxDecoration(
        color: Colors.grey[850],
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black45,
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 12),
        child: Column(
          children: [
            Text(
              label,
              style: TextStyle(
                color: color,
                fontWeight: FontWeight.w600,
                fontSize: 14,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              '$count',
              style: TextStyle(
                fontSize: 24,
                color: color,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

String prettifyEnumName(String name) {
  final withSpaces = name.replaceAllMapped(
    RegExp(r'([A-Z])'),
    (m) => ' ${m[1]}',
  );
  return withSpaces[0].toUpperCase() + withSpaces.substring(1);
}

List<String> getAllSubjects() {
  return [
    ...SubjectName.values.map((e) => prettifyEnumName(e.name)),
    ...dynamicSubjects,
  ];
}

List<String> getAllTeachers() {
  return [
    ...TeacherName.values.map((e) => prettifyEnumName(e.name)),
    ...dynamicTeachers,
  ];
}

void addSubject(String subject) {
  if (!dynamicSubjects.contains(subject)) {
    dynamicSubjects.add(subject);
  }
}

void addTeacher(String teacher) {
  if (!dynamicTeachers.contains(teacher)) {
    dynamicTeachers.add(teacher);
  }
}
```
